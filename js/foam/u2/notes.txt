Good idea to replace E() with start().end() and tag()?

validate
async/future view loading

cache id$el based on lifecycle?
  - better to move element out of id and into Element

SlidePanel to test nesting

Done: set properties with attrs()?

registerElement
  - Use Context or Element
  - registerModel?

Move elements to foam.u2.tag.input ?

How to handle OnKeyInput and OnKeyTextArea
  - have two data$'s
  - set mode

ActionBorder

elementForFeature or elementForName needs to come out of the Context.
Are we going to have leakage?  Does it matter?
<data:feature/> (default)
<view:feature/>

same as E()

X.E('view:feature');

X.registerElement()

X.elementMap_;  -> starts with constant collection

<foam.u2.tag.Input prop={{this.FIRST_NAME}}/>

element: true, Property property

Do we need to rename Value?

done: myCls()

<div class="foo bar">{{.cls('foobar', function() { })}}
<div class="foo {{foobar: function() { }}}">
<div class="foo foobar{{function() { }}}">


NO: OPTIONAL_CLOSE_TAGS

<table>
  <tr>
    <td>blah
    <td>blah
    <td>blah
  <tr>
    <td>blah
      <td>blah
        <td>blah
</table>

<div var="foo">         ???
</div>
((
  foo.cls('adf');
))


Done: 'as' support
Done: if
Done: repeat (add map support)

TODO:
  dynamic class syntax
  focus?
    - works, but when to add listeners?
  computedStyle
  lifecycle
  cleanup
  validation
  keyboard action shortcuts

destroy should work from any state.

onclick={{something}} should not parse to an attribute.

This would be a better template for Board.js:

      <div class="^row" repeat="row in 0..this.height-1">
        <:Cell x={{row}} y={{col}} repeat="col in 0..this.width-1"/>
      </div>

If an element has an as="" block then no need to push onto stack.  Maybe just assign a name if not defined and get rid of stack.

Should .c() take vargs?

Is (( and )) for code going to cause a problem with code escaping?  Should something else be used instead?
{{{   }}}
{* *}


This should work in Cells.
    {
      // TODO: doesn't work, but should
      name: 'state',
      dynamicValue: function(covered, marked) { return marked ? 'marked' : covered ? 'covered' : ''; }
    }


visibility / mode is completely broken

&nbsp; is an issue
needs to be escaped, but is used in templates
extend parser
.escape('&nbsp;')
